import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
iris = pd.read_csv('/content/Iris (1).csv')
iris.head()

import numpy as np 
iris['Species'].unique()
species_array = np.array(['setosa', 'versicolor', 'virginica'], dtype=object) 
print(species_array) 
X = iris.iloc[:,:4].values
Y = iris.iloc[:,4].values
Y

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
Y = le.fit_transform(Y)
Y

from tensorflow.keras.utils import to_categorical
Y = to_categorical(Y)
Y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30)
from sklearn.preprocessing import MinMaxScaler
scaler_object = MinMaxScaler()
scaler_object.fit(X_train)
MinMaxScaler()
scaled_X_train = scaler_object.transform(X_train)
scaled_X_test = scaler_object.transform(X_test)
scaled_X_train

from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(10,input_dim = 4,activation='relu'))
model.add(Dense(3,activation='softmax'))
model.compile(loss="categorical_crossentropy",optimizer="adam",metrics=["accuracy"])
model.summary()

history = model.fit(scaled_X_train,y_train,epochs=250)

y_pred = model.predict(scaled_X_test)

scaled_X_test[0]

y_test[0]

y_pred[0]

y_prediction = np.argmax(y_pred, axis=-1)
y_actual = np.argmax(y_test, axis=-1)
y_test


plt.plot(history.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train'])
plt.show()

plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train'])
plt.show()
